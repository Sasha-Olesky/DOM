import { Iterator } from '@findy-sources/meta';
export declare type WrapIterate = (...args: any[]) => (iterator: Iterator) => Iterator;
export declare const DefaultFetch: WrapIterate;
/**
 * Insert as last middleware to debug context coming from the frontend
 *
 * @param iteratorName
 * @constructor
 */
export declare const LogCtx: WrapIterate;
export declare const Context: WrapIterate;
/**
 * Middleware that returns items in chunks
 */
export declare const Chunk: WrapIterate;
export declare const RemoveGarbageAndSeen: WrapIterate;
/**
 * Throws if we got not items in `limit` of steps.
 *
 * Requires RemoveGarbageAndSeen and Discard earlier in pipeline to work correctly.
 *
 * @param limit
 */
export declare const NoResultsChecker: WrapIterate;
export declare const Test: WrapIterate;
export declare const ConvertItemsToPublicAPI: WrapIterate;
export declare const PersistContext: WrapIterate;
