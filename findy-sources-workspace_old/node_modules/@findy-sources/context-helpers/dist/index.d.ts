import { NativeFetch } from '@findy-sources/meta';
import { Request } from '@findy-sources/request';
export declare type ContextOptions = {
    steps?: number;
    firstPage?: number;
};
export declare type WithPageCb<T> = (ctx: {
    request: Request;
    page: number;
}) => Promise<{
    hasMorePages: boolean;
    values: T[];
    estimatedTotal?: number;
}>;
export declare function withPage<T>(cb: WithPageCb<T>): ({ page }: {
    page: number;
}, nativeFetch: NativeFetch) => Promise<{
    values: T[];
    context: {
        done: boolean;
    } | {
        page: number;
    };
    estimatedTotal: number;
}>;
export declare type WithCursorCb<T> = (ctx: {
    request: Request;
    cursor: string;
}) => Promise<{
    nextCursor?: string;
    values: T[];
    estimatedTotal?: number;
}>;
export declare function withCursor<T>(cb: WithCursorCb<T>): (context: {
    nextCursor: string;
}, nativeFetch: NativeFetch) => Promise<{
    values: T[];
    context: {
        done: boolean;
    } | {
        nextCursor: string;
    };
    estimatedTotal: number;
}>;
export declare type WithStepAndPageCb<T> = (ctx: {
    request: Request;
    page: number;
    step: number;
}) => Promise<{
    hasMorePages: boolean;
    values: T[];
    estimatedTotal?: number;
}>;
export declare function withStepAndPage<T>(steps: number, cb: WithStepAndPageCb<T>): ({ page, step }: {
    page: number;
    step: number;
}, nativeFetch: NativeFetch) => Promise<{
    context: {
        done: boolean;
    };
    values: any[];
    estimatedTotal?: undefined;
} | {
    values: T[];
    context: any;
    estimatedTotal: number;
}>;
