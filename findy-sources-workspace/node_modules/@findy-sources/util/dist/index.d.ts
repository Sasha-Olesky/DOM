export { randomMobileUserAgent, randomDesktopUserAgent } from './lib/useragent';
export { applySynonyms, getSynonymsArray, getSynonymsVariants } from './lib/synonyms';
export { yearsArrayToRegExp } from './lib/years/yearsHelper';
export { default as fuzzyIncludes } from './lib/fuzzyIncludes';
/**
 * Puts input value in array.
 *
 *     valueToArray('foo') // ['foo']
 */
export declare const valueToArray: <T>(value: T) => T[];
/**
 * Replaces character entities in HTML document with corresponding characters.
 *
 *     replaceHtmlEntities('foo&#x2F;bar') // 'foo/bar'
 */
export declare const replaceHtmlEntities: (html: string) => string;
/**
 * Creates a function that performs left-to-right function composition.
 *
 * Result of each function is passed to the next function.
 *
 * If undefined is returned by function inside, returns undefined.
 *
 *     const foo = (...values) => values.join(' ')
 *     pipe(foo)('foo', 'bar', 'baz') // 'foo bar baz'
 *
 *     pipe((x, y) => `${x}${y.bar}`)('foo', { bar: 'bar' }) // 'foobar'
 *
 *     pipe((x, { bar }) => `${x}${bar}`)('foo', { bar: 'bar' }) // 'foobar'
 */
export declare function pipe(...funcArray: any[]): (...args: any[]) => any;
/**
 * Checks whether input is 2-letter code of Canada province.
 *
 *     isCanadaProvince('QC') // true
 */
export declare const isCanadaProvince: (x: string) => boolean;
/**
 * Rounds input number to the specified number of digits after the decimal point.
 *
 *     round(1.06, 1) // 1.1
 *     round(1.06) // 1
 */
export declare const round: (x: number, digits?: number) => number;
/**
 * Creates a Range object from input values.
 *
 * If both input values are null or undefined, returns undefined.
 *
 *     toRange(1, 5) // { min: 1, max: 5 }
 *     toRange(1) // { min: 1, max: 1 }
 *     toRange(1, null) // { min: 1 }
 */
export declare function toRange(min: number, max?: number): {
    min: number;
    max?: undefined;
} | {
    min: number;
    max: number;
};
/**
 * Creates numeric array from Range object.
 *
 *     rangeToArray({ min: 1, max: 5 }) // [1, 2, 3, 4, 5]
 */
export declare const rangeToArray: ({ min, max }: {
    min: number;
    max: number;
}) => any[];
/**
 * Complements year range.
 *
 * Replaces missing min and max values with 1900 and current year + 2, accordingly.
 *
 * If value is present, it won't be replaced.
 *
 *     complementYearRange({ min: 1990, max: 2010 }) // { min: 1990, max: 2010 }
 *     complementYearRange({ max: 2010 }) // { min: 1900, max: 2010 }
 *     complementYearRange({ min: 1990 }) // { min: 1990, max: 2020 } // assuming we're in 2018
 */
export declare const complementYearRange: (year: {
    min?: number;
    max?: number;
}) => {
    min: number;
    max: number;
};
/**
 * Creates a function that checks whether input meets condition.
 *
 * If condition is not met returns undefned.
 *
 * Used when supported value needs further processing, and unsupported cancels mapping.
 *
 *     const f = allowIf(x => x === '42')
 *     f(42) // 42
 *     f(24) // undefined
 */
export declare function allowIf(func: any): (a: any) => any;
/**
 * Creates a function that formats date.
 *
 *     const f = formatDate('MM/DD/YYYY')
 *     f('2018-06-20') // '06/20/2018'
 */
export declare const formatDate: (format: string) => (date: string) => string;
/**
 * Extracts year from string.
 *
 * Year should be in range from 1900 to 2099.
 *
 *     yearFromTitle('1983 DeLorean DMC-12') // 1983
 */
export declare const yearFromTitle: (title: string) => number;
