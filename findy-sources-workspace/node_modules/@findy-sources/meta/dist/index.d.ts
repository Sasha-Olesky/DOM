import { BaseItem } from './item';
import { Profile } from './profile';
export { filters } from './filters/index';
export { categoryGroups, itemCategoryGroups } from './categories';
export * from './profile';
export * from './item';
export * from './options';
export * from './radius';
export interface FetchParams {
    uri: string;
    method: string;
    body?: string;
    headers?: Record<string, string>;
}
export declare type NativeFetch = (params: FetchParams) => Promise<string>;
export declare type LibraryOptions = {
    gzip?: boolean;
    endpointApi: string;
    httpFetchFn: NativeFetch;
    enableHilton?: boolean;
    debugMapping?: boolean;
    enableUnits?: boolean;
    enableChunking?: boolean;
    chunkSize?: number;
    enableDelivery?: boolean;
};
export declare type SerializedContext = {
    done?: boolean;
    page?: number;
    step?: number;
    nextCursor?: string;
} | null;
export interface Options {
    radius: {
        min: number;
        max: number;
    };
}
export interface Coordinates {
    lat: number;
    lng: number;
}
export declare type Radius = {
    min?: number;
    max: number;
};
export interface ParsedData<T> {
    values: T[];
    hasMorePages: boolean;
}
export interface IterationResult<Item = BaseItem, Context = SerializedContext> {
    context: Context;
    values: Item[];
    estimatedTotal?: number;
}
export declare type Iterator<Item = BaseItem, Context = SerializedContext> = (context: Context | undefined, fetch: NativeFetch) => Promise<IterationResult<Item, Context>>;
export interface Source<Item = BaseItem, Context = SerializedContext> {
    (profile: Profile): (options: Options) => Iterator<Item, Context>[] | Iterator<Item, Context> | undefined | null | false;
}
export declare type SourceCondition = (profile: Profile) => boolean;
export interface SourceDefinition {
    name: string;
    source: Source;
    condition?: SourceCondition;
    persistContext?: boolean;
}
export declare type Fail = {
    reason: string;
    value: any;
};
export interface Range {
    min?: number;
    max?: number;
}
export declare const ItemSchema: any;
export declare const ProfileSchema: any;
